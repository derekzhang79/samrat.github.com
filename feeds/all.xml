<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Samrat Man Singh</title><link>http://samrat.me/</link><description></description><atom:link href="http://samrat.me/feeds/all.xml" rel="self"></atom:link><lastBuildDate>Sun, 14 Oct 2012 12:11:00 +0545</lastBuildDate><item><title>Getting started with Clojurescript</title><link>http://samrat.me/blog/2012/10/getting-started-with-clojurescript</link><description>&lt;p&gt;There doesn't seem to be much written about running Clojurescript, especially considering how great a tool it really is. I know there is &lt;a href="http://shop.oreilly.com/product/0636920025139.do"&gt;a book&lt;/a&gt; that's coming out soon, but I had some trouble getting started with Clojurescript so I decided to put together this post, that hopefully at least some of you will find useful. This post does assume that you have some knowledge of Clojure and that you've got Leiningen already running.&lt;/p&gt;
&lt;p&gt;To those not familiar with Clojurescript, its a Clojure compiler that targets Javascript. This simply means that it turns Clojure code into Javascript. It's like &lt;a href="http://coffeescript.org"&gt;Coffeescript&lt;/a&gt;. To find out why you might want to use Clojurescript(and Clojure) check out this &lt;a href="https://oracleus.activeevents.com/connect/sessionDetail.ww?SESSION_ID=3242"&gt;talk&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Getting started&lt;/h3&gt;
&lt;p&gt;As I said, you need to have Leiningen installed. For this post, I'll use Noir as the backend for a really simple app that doesn't do much. However, I'll show how you can have the app's client and server side communicate with each other, which'll make use of Noir. So, we'll just start off with a Noir project:&lt;/p&gt;
&lt;p&gt;If you're using Lein 1:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;lein&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;lein&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;noir&lt;/span&gt; 1&lt;span class="p"&gt;.&lt;/span&gt;3&lt;span class="p"&gt;.&lt;/span&gt;0&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;beta3&lt;/span&gt;
&lt;span class="n"&gt;lein&lt;/span&gt; &lt;span class="n"&gt;noir&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;cljsintro&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And if you're running Lein 2:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;lein&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;noir&lt;/span&gt; &lt;span class="n"&gt;cljsintro&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great! Now if you &lt;code&gt;cd&lt;/code&gt; into your Noir project and do &lt;code&gt;lein run&lt;/code&gt; your app should run and you should be able to see the default Noir page, when you visit &lt;code&gt;http://localhost:8080&lt;/code&gt; on your browser. Nothing special there. To be able to have your Clojurescript compile, we'll use the &lt;code&gt;lein-cljsbuild&lt;/code&gt; plugin. To do that, you need to add a couple of things to your &lt;code&gt;project.clj&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defproject &lt;/span&gt;&lt;span class="nv"&gt;cljsintro&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.1.0-SNAPSHOT&amp;quot;&lt;/span&gt;
            &lt;span class="ss"&gt;:description&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A short intro to Clojurescript&amp;quot;&lt;/span&gt;
            &lt;span class="ss"&gt;:dependencies&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;org.clojure/clojure&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1.4.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;noir&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1.3.0-beta3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

            &lt;span class="c1"&gt;;; Add lein-cljsbuild plugin&lt;/span&gt;
            &lt;span class="ss"&gt;:plugins&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;lein-cljsbuild&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.2.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

            &lt;span class="c1"&gt;;; config. for cljsbuild&lt;/span&gt;
            &lt;span class="ss"&gt;:cljsbuild&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="ss"&gt;:builds&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
                                  &lt;span class="ss"&gt;:source-path&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;src/cljs&amp;quot;&lt;/span&gt;
                                  &lt;span class="ss"&gt;:compiler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                             &lt;span class="ss"&gt;:output-to&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;resources/public/js/main.js&amp;quot;&lt;/span&gt;
                                             &lt;span class="ss"&gt;:optimizations&lt;/span&gt; &lt;span class="ss"&gt;:whitespace&lt;/span&gt;
                                             &lt;span class="ss"&gt;:pretty-print&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}}]}&lt;/span&gt;
            &lt;span class="ss"&gt;:main&lt;/span&gt; &lt;span class="nv"&gt;cljsintro.server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We've added 2 main things to the default &lt;code&gt;project.clj&lt;/code&gt;: &lt;code&gt;:plugins&lt;/code&gt; and &lt;code&gt;:cljsbuild&lt;/code&gt;. The &lt;code&gt;:plugins&lt;/code&gt; part is pretty self-explanatory- we just added the &lt;code&gt;lein-cljsbuild&lt;/code&gt; plugin to our project. The second thing that we added, &lt;code&gt;:cljsbuild&lt;/code&gt; gives the plugin the configuration necessary to compile our Clojrurescript code. Let's take a look at the configuration. Our &lt;code&gt;:builds&lt;/code&gt; sequence contains only one map which means that we want all our code to compile with the same settings. Inside &lt;code&gt;:builds&lt;/code&gt;, the &lt;code&gt;:source-path&lt;/code&gt; tells the compiler where to look for the Clojurescript source files. And the &lt;code&gt;:output-to&lt;/code&gt; tells the compiler where to put the compiled Javascript file.&lt;/p&gt;
&lt;p&gt;Before talking about &lt;code&gt;optimizations&lt;/code&gt;, lets tackle off &lt;code&gt;:pretty-print&lt;/code&gt;- its pretty simple, setting it to &lt;code&gt;true&lt;/code&gt; will cause the resulting JS file to have pretty-printed code, and setting-it to &lt;code&gt;false&lt;/code&gt; will not. Now, to talk about optimizations- Clojurescript is compatible with with something called Google Closure(don't confuse yourself between Closure and Clojure), which optimizes Javascript code. I'm really not familiar with Google Closure, but apparently, its really powerful and will help your code load and run faster. You can set &lt;code&gt;:optimizations&lt;/code&gt; to three possible values: &lt;code&gt;:whitespace&lt;/code&gt;, &lt;code&gt;:simple&lt;/code&gt; and &lt;code&gt;:advanced&lt;/code&gt;. Here, we have set it to &lt;code&gt;:whitespace&lt;/code&gt; which is the most basic level of optimization but you can set it to &lt;code&gt;:simple&lt;/code&gt; and &lt;code&gt;:advanced&lt;/code&gt; when pushing code to production.&lt;/p&gt;
&lt;h3&gt;Clojurescript-ing&lt;/h3&gt;
&lt;p&gt;We've told the compiler that all our Clojurescript is to be found at &lt;code&gt;src/cljs&lt;/code&gt;, so you'll need to make that directory. Also, before writing any Clojurescript, let's make a few changes to the Noir app. Open &lt;code&gt;common.clj&lt;/code&gt; inside &lt;code&gt;/src/cljsintro/views&lt;/code&gt; and make a few edits:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;cljsintro.views.common&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:use&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;noir.core&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;defpartial&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;hiccup.page&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;include-css&lt;/span&gt; &lt;span class="nv"&gt;include-js&lt;/span&gt; &lt;span class="nv"&gt;html5&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defpartial&lt;/span&gt; &lt;span class="nv"&gt;layout&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;html5&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:head&lt;/span&gt;
           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cljsintro&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;include-css&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/css/reset.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:body&lt;/span&gt;
           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:div#wrapper&lt;/span&gt;
            &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;include-js&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/js/main.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've made two changes to the default template- on line 3 I've added &lt;code&gt;include-js&lt;/code&gt;, which we used on the last line to use &lt;code&gt;main.js&lt;/code&gt; on our HTML files. Note that you didn't have to type in the &lt;code&gt;resources/public&lt;/code&gt; where the &lt;code&gt;js&lt;/code&gt; folder lies in because Noir is already looking there for static files.&lt;/p&gt;
&lt;p&gt;Now, finally lets create a file inside the &lt;code&gt;cljs&lt;/code&gt; directory called &lt;code&gt;main.cljs&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;cljs.main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;js/alert&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hey, there&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's the Javascript equivalent of just &lt;code&gt;alert("Hey There");&lt;/code&gt;. To compile it run&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;lein&lt;/span&gt; &lt;span class="n"&gt;cljsbuild&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which will compile the code just once. Alternatively if you do &lt;code&gt;lein cljsbuild auto&lt;/code&gt;, the compiler will watch for changes in the source-path and re-compile when a change is made.&lt;/p&gt;
&lt;p&gt;Run the Noir app with &lt;code&gt;lein run&lt;/code&gt; and if you visit &lt;code&gt;http://localhost:8080/welcome&lt;/code&gt; you should see an alert box. Cool.&lt;/p&gt;
&lt;h3&gt;DOM&lt;/h3&gt;
&lt;p&gt;A lot of people use Javascript for manipulating the DOM- that is, adding effects like making things happen when buttons get clicked. You can do all of that stuff with Clojurescript. There are a couple of libraries available like &lt;a href="https://github.com/ibdknox/jayq"&gt;jayq&lt;/a&gt;(which is a jQuery wrapper), &lt;a href="https://github.com/levand/domina"&gt;domina&lt;/a&gt; and &lt;a href="https://github.com/ckirkendall/enfocus"&gt;enfocus&lt;/a&gt;. I've personally used enfocus because its better documented compared to the other two. These are pretty easy to use.&lt;/p&gt;
&lt;h3&gt;Go, fetch&lt;/h3&gt;
&lt;p&gt;At the beginning I talked about making the client and server sides of our app talk to each other. Now, let's do that using a neat library called &lt;code&gt;fetch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first thing we'll need to do is add &lt;code&gt;fetch&lt;/code&gt; as a dependency. Strangely enough, fetch's Github Readme page doesn't tell what the latest version is and I have to go to &lt;code&gt;project.clj&lt;/code&gt; to find it out. At the time of this writing its "0.1.0-alpha2", so add &lt;code&gt;[fetch "0.1.0-alpha2"]&lt;/code&gt; to &lt;code&gt;:dependencies&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, add these two lines to your Clojurescript file's namespace declaration:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;fetch.remotes&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;remotes&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require-macros&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;fetch.macros&lt;/span&gt; &lt;span class="ss"&gt;:as&lt;/span&gt; &lt;span class="nv"&gt;fm&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And let's create a call to a function that's on the server-side.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fm/remote&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;adder&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;js/alert&lt;/span&gt; &lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This calls a remote function on the server which looks like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;;; Add (:use noir.fetch.remotes) to the namespace&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defremote&lt;/span&gt; &lt;span class="nv"&gt;adder&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;apply + &lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now recompile the Clojurescript code and refresh your browser, and you should be able to see the result of &lt;code&gt;adder&lt;/code&gt; applied to the numbers we provided in a JS alert box. This is nothing special, as we could have defined &lt;code&gt;adder&lt;/code&gt; in the Clojurescript code itself, but the same principle can be applied to use with functions that needs to be run on the server.&lt;/p&gt;
&lt;p&gt;Some resources that you might want to check out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chris-granger.com/2012/02/20/overtone-and-clojurescript/"&gt;Chris Granger- Overtone and Clojurescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.myclojureadventure.com/2012/09/intro-to-clojurescript-getting-started.html"&gt;My Clojure Adventure: Intro to ClojureScript - Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Sun, 14 Oct 2012 12:11:00 +0545</pubDate><guid>tag:samrat.me,2012-10-14:blog/2012/10/getting-started-with-clojurescript</guid><category>programming</category><category>clojure</category><category>clojurescript</category></item><item><title>Fighting an N-headed monster with recursion</title><link>http://samrat.me/blog/2012/10/fighting-an-n-headed-monster-with-recursion</link><description>&lt;p&gt;A while back, I came upon this problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"You need to kill an N-headed monster. To do that, you have two swords. The first sword(A) cuts &lt;code&gt;cutA&lt;/code&gt; heads, however, in case the monster doesn't die(ie &lt;code&gt;no. of heads &amp;gt; 0&lt;/code&gt;), it will grow &lt;code&gt;growA&lt;/code&gt; heads. The second sword works the same way, except that it'll cut &lt;code&gt;cutB&lt;/code&gt; heads and in case the monster is still alive, it'll grow &lt;code&gt;growB&lt;/code&gt; heads. If a sword is used to result in the no. of monster heads being less than 0, you die."&lt;/p&gt;
&lt;p&gt;The problem is to find the shortest combination of swords that can be used to kill the monster(without killing yourself).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a paraphrase of the original question(so the question might have sounded a bit awkward). Here's my solution to it, in Scheme(Racket):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;cutA&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;growA&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;cutB&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;growB&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;attack-monster&lt;/span&gt; &lt;span class="nv"&gt;heads&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-sword&lt;/span&gt; &lt;span class="nv"&gt;heads&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-sword&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;grow&lt;/span&gt; &lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt; &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
         &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;else&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-sword&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;grow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;cutA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;growA&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;append &lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="ss"&gt;&amp;#39;a&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-sword&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;grow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;cutB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;growB&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;append &lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="ss"&gt;&amp;#39;b&lt;/span&gt;&lt;span class="p"&gt;)))))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;shortest-way&lt;/span&gt; &lt;span class="nv"&gt;heads&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;attack-monster&lt;/span&gt; &lt;span class="nv"&gt;heads&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;length &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;length &lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's how to use it:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;shortest-way&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thanks to &lt;a href="http://www.reddit.com/user/skeeto"&gt;skeeto&lt;/a&gt; on &lt;a href="http://www.reddit.com/r/scheme/comments/10zc9x/finding_shortest_link_from_within_a_recursive/"&gt;Reddit&lt;/a&gt; for helping me out with this, and more importantly for &lt;strong&gt;not&lt;/strong&gt; showing me his code :)&lt;/p&gt;
&lt;p&gt;Also, I'd love to see how you guys do this in a more efficient and more elegant ways.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Sun, 07 Oct 2012 03:36:00 +0545</pubDate><guid>tag:samrat.me,2012-10-07:blog/2012/10/fighting-an-n-headed-monster-with-recursion</guid><category>programming</category><category>scheme</category><category>recursion</category></item><item><title>Reading Packet</title><link>http://samrat.me/blog/2012/09/reading-packet</link><description>&lt;p&gt;Not unlike &lt;strong&gt;to-do lists&lt;/strong&gt;, reading lists(or rather &lt;em&gt;read-later&lt;/em&gt; lists) always seem to grow at a way greater pace than a person can check-off its items. That's one of the reasons why I made &lt;a href="http://reading-packet.samrat.me"&gt;Reading Packet&lt;/a&gt;, a small web app that uses the &lt;a href="http://getpocket.com"&gt;Pocket&lt;/a&gt; API to help you find articles depending on how much time you've got.&lt;/p&gt;
&lt;p&gt;If you haven't started using a &lt;em&gt;read-later&lt;/em&gt; app, &lt;a href="http://getpocket.com"&gt;Pocket&lt;/a&gt; is really great, and free! And once you've added a few items, you can start reading with Reading Packet whenever you're free.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://reading-packet.samrat.me"&gt;Give it a try!&lt;/a&gt; and don't forget to tell me what you think.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Mon, 03 Sep 2012 11:50:00 +0545</pubDate><guid>tag:samrat.me,2012-09-03:blog/2012/09/reading-packet</guid><category>projects</category><category>web apps</category><category>reading</category></item><item><title>How to add Reading Time to your website or blog</title><link>http://samrat.me/blog/2012/08/how-to-add-reading-time-to-your-website-or-blog</link><description>&lt;p&gt;A few days ago I released &lt;a href="http://reading-time.samrat.me"&gt;Reading Time&lt;/a&gt;, a small Noir web app that tells you how long it will take for you to read an online article. The front-facing web app is pretty simple to use- just copy the URL of an article, paste it into Reading Time and it'll tell you how long you'll probably need to read the article. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://imgur.com/IITRk"&gt;&lt;img src="http://i.imgur.com/IITRk.png?1" title="Reading Time" alt="" width='675px'/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, instead I'm going to go through how to embed Reading Time into your blog or website, so you can tell your readers how long they will take to read an article. The original inspiration for Reading Time was &lt;a href="http://swizec.com"&gt;Swizec&lt;/a&gt;'s blog post- &lt;a href="http://swizec.com/blog/services-i-want-to-pay-for/swizec/5158"&gt;Services I want to pay for&lt;/a&gt; which lists the idea as &lt;strong&gt;"Tell my users how long they are likely to take reading a story"&lt;/strong&gt; so I had been working on an API along with the web app right from the beginning. &lt;/p&gt;
&lt;h2&gt;The API&lt;/h2&gt;
&lt;p&gt;The API is dead simple. Send a GET request to &lt;code&gt;http://reading-time.samrat.me/api&lt;/code&gt; with just &lt;code&gt;url&lt;/code&gt; as a parameter and you'll get a JSON message. If JSONP is required, send a &lt;code&gt;callback&lt;/code&gt; argument too.&lt;/p&gt;
&lt;p&gt;The URL should look like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;reading&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;samrat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;?&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;samrat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;2011&lt;span class="o"&gt;/&lt;/span&gt;08&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;newsblur&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;awesome&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;alternative&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;google&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;?
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is what the responses look like:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://reading-time.samrat.me/api?url&lt;span class="o"&gt;=&lt;/span&gt;http://samrat.me/blog/2011/08/newsblur-an-awesome-alternative-to-google-reader&amp;amp;callback&lt;span class="o"&gt;=&lt;/span&gt;?
?&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;minutes&amp;quot;&lt;/span&gt;:1.0160000324249268,&lt;span class="s2"&gt;&amp;quot;readable&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;1 minutes, 0 seconds&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://reading-time.samrat.me/api?url&lt;span class="o"&gt;=&lt;/span&gt;http://samrat.me/blog/2011/08/newsblur-an-awesome-alternative-to-google-reader
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;minutes&amp;quot;&lt;/span&gt;:1.0160000324249268,&lt;span class="s2"&gt;&amp;quot;readable&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;1 minutes, 0 seconds&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Embedding Reading Time&lt;/h2&gt;
&lt;p&gt;To embed Reading Time on this site, I'm using this short script that makes use of jQuery:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.reading-time.samrat.me/api?url=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;amp;callback=?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;div.rt_readable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Reading Time: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;div.rt_readable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The script is also available at &lt;a href="http://www.reading-time.samrat.me/js/embed_rt.js"&gt;http://www.reading-time.samrat.me/js/embed_rt.js&lt;/a&gt;, so you can add it to your site by just adding a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; pointing to that link. Note that you'll also need to add &lt;a href="http://jquery.com"&gt;jQuery&lt;/a&gt; to your site &lt;em&gt;before&lt;/em&gt; this script.&lt;/p&gt;
&lt;p&gt;Now, all you need to do is add &lt;code&gt;&amp;lt;div class='rt_readable'&amp;gt; &amp;lt;/div&amp;gt;&lt;/code&gt; where you want Reading Time to appear. And when the page loads, you should see the Reading Time of the page. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Fri, 31 Aug 2012 09:00:00 +0545</pubDate><guid>tag:samrat.me,2012-08-31:blog/2012/08/how-to-add-reading-time-to-your-website-or-blog</guid><category>programming</category><category>projects</category><category>api</category></item><item><title>Extracting feed articles in Clojure</title><link>http://samrat.me/blog/2012/08/extracting-feed-articles-in-clojure</link><description>&lt;p&gt;I'm reading &lt;a href="http://shop.oreilly.com/product/9780596529321.do"&gt;&lt;strong&gt;Programming Collective Intelligence&lt;/strong&gt;&lt;/a&gt; by &lt;a href="http://kiwitobes.com/"&gt;&lt;strong&gt;Toby Segaran&lt;/strong&gt;&lt;/a&gt; and doing the examples in Clojure. &lt;em&gt;Chapter 3&lt;/em&gt; in the book shows you how to cluster similar blogs together using word-frequencies generated from their feeds. &lt;/p&gt;
&lt;p&gt;Now, some blogs annoyingly give out just a link to the post or just a short blurb of the post in their feeds. That proved to be a major annoyance but I found a workaround to deal with it, which I will describe in this post. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;(By the way, if you have a blog that publishes just links or blurbs, please consider changing your feed settings; you'll make a lot of people reading your blog using a feed reader, and a few programmers a lot happier)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I used &lt;a href="https://github.com/scsibug/feedparser-clj"&gt;&lt;strong&gt;feedparser-clj&lt;/strong&gt;&lt;/a&gt; to parse feeds in order to grab the whole article from the feed, I used &lt;a href="https://github.com/jiminoc/goose"&gt;Goose&lt;/a&gt;, which is a Scala library. Because of this, you can't simply start using Goose by just adding it as a Leiningen dependency. Thankfully, there is a tool, &lt;a href="https://github.com/kumarshantanu/lein-localrepo"&gt;&lt;code&gt;lein-localrepo&lt;/code&gt;&lt;/a&gt; that greatly simplifies installing Leiningen or Maven repos from a local file(as opposed to from clojars.org). After installing localrepo, you need to install Goose:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;lein&lt;/span&gt; &lt;span class="n"&gt;localrepo&lt;/span&gt; &lt;span class="n"&gt;coords&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which will give you something like &lt;code&gt;goose/target/goose-2.1.19.jar goose/goose 2.1.19&lt;/code&gt;. Now, to actually install it:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;lein&lt;/span&gt; &lt;span class="n"&gt;localrepo&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;goose&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;goose&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;2&lt;span class="p"&gt;.&lt;/span&gt;1&lt;span class="p"&gt;.&lt;/span&gt;19&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;goose&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;goose&lt;/span&gt; 2&lt;span class="p"&gt;.&lt;/span&gt;1&lt;span class="p"&gt;.&lt;/span&gt;19
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, add &lt;code&gt;[com.gravity/goose "2.1.19"]&lt;/code&gt; to your project dependencies. Now, if you open a REPL in the project dir(using &lt;code&gt;lein repl&lt;/code&gt;), you should be able to import stuff from Goose:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;import &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;com.gravity.goose&lt;/span&gt; &lt;span class="nv"&gt;Goose&lt;/span&gt; &lt;span class="nv"&gt;Configuration&lt;/span&gt; &lt;span class="nv"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To extract the article from a URL, type in a function:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;extract-article&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;Extracts the article from url.&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;     &lt;span class="nv"&gt;url&lt;/span&gt;
    &lt;span class="nv"&gt;goose&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Goose.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Configuration.&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nv"&gt;article&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.extractContent&lt;/span&gt; &lt;span class="nv"&gt;goose&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.cleanedArticleText&lt;/span&gt; &lt;span class="nv"&gt;article&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we will extract a list of blog post URLs:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;feedparser-clj&lt;/span&gt; &lt;span class="ss"&gt;:exclude&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;-main&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;articles-list&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;feed-url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;parsed&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;parse-feed&lt;/span&gt; &lt;span class="nv"&gt;feed-url&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="ss"&gt;:link&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:entries&lt;/span&gt; &lt;span class="nv"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, to get all the extracted articles from a feed, you can map &lt;code&gt;extract-article&lt;/code&gt; to a list of article URLs:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map &lt;/span&gt;&lt;span class="nv"&gt;extract-article&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;articles-list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://samrat.me/feeds/all.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I hope that helped clear out or avoid at least some confusion. You can shoot out any queries or feedback to &lt;a href="http://twitter.com/samratmansingh"&gt;@samratmansingh&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Tue, 21 Aug 2012 21:10:00 +0545</pubDate><guid>tag:samrat.me,2012-08-21:blog/2012/08/extracting-feed-articles-in-clojure</guid><category>clojure</category><category>programming</category></item><item><title>An IDE as a packaged Chrome app</title><link>http://samrat.me/blog/2012/08/an-ide-as-a-packaged-chrome-app</link><description>&lt;p&gt;Everyone is talking about how browsers are getting more powerful. With recent developments such as Google's V8 Javascript engine, web browsers are being viewed more and more as platforms and not as mere "document viewers" to the web. The Chromebook is probably the best example I can site of this paradigm shift.&lt;/p&gt;
&lt;p&gt;Anyways as browsers become more powerful, attempts to create development environments based on browsers have also gotten more agressive. The most notable of these attempts is probably &lt;a href="http://app.kodowa.com/playground"&gt;Light Table&lt;/a&gt;, which is a really sleek IDE that runs on the browser. (Just to be accurate for Light Table, the actual "evaluation" of the code happens outside the browser)&lt;/p&gt;
&lt;p&gt;Its first beta version that's called Light Table Playground was released a while back, and while the initial "pitch" had seemed really promising, &lt;strong&gt;I found that programming inside the browser was not something that I enjoyed doing&lt;/strong&gt;. Well, I know that the guys working on Light Table are developing the tool as an in-browser tool. And I think an IDE that can talk to the Internet is the right way to go.&lt;/p&gt;
&lt;p&gt;What I really want to see is an &lt;strong&gt;IDE that acts as first-class desktop app, but can still talk to the web&lt;/strong&gt;, like most web apps. And yes, that would be something close to Chrome apps, but the Google Chrome team recently(it was about a month back) announced that Chrome apps are about to get an overhaul that is more along the lines of what I'm talking about:&lt;/p&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/lBUGTVIJVfM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Having such an app would feel comfortable while still leveraging the power of the mighty "clouds". Since I already keep my &lt;code&gt;code/&lt;/code&gt; folder inside Dropbox, I'd say that the app could take Dropbox as a "role model". The app would be available offline, but when its online it would start syncing to its servers so you can access your code anywhere.&lt;/p&gt;
&lt;p&gt;Ideally, the app would be a one-click install which would set up your development environment exactly as you've configured. And of course, there's bonus points for modeling this around Vim :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Sun, 05 Aug 2012 00:00:00 +0545</pubDate><guid>tag:samrat.me,2012-08-05:blog/2012/08/an-ide-as-a-packaged-chrome-app</guid><category>development environment</category><category>software</category><category>cloud</category><category>chrome</category></item><item><title>Help me buy a domain name</title><link>http://samrat.me/blog/2012/07/help-me-buy-a-domain-name</link><description>&lt;p&gt;&lt;strong&gt;UPDATE- &lt;a href="http://news.ycombinator.com/user?id=Udo"&gt;Udo&lt;/a&gt; on Hacker News was kind enough to buy me a domain. This site can now be reached at &lt;a href="http://samrat.me"&gt;http://samrat.me&lt;/a&gt;. Thanks a lot, Udo.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've got a problem. I want to buy a domain name for this website. But due to some banking regulations in my country, online payments cannot be made(for international transactions, at least.) Some companies &lt;em&gt;are&lt;/em&gt; making money by buying products on Amazon and other online shops on behalf of people here, but they're limited to only physical goods. &lt;/p&gt;
&lt;p&gt;This problem has been troubling me for a while, and I've come up with what could be a solution. Following all the recent buzz around Kickstarter- I decided to ask the Internet for help, but don't worry, &lt;strong&gt;I'm not asking for your money&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;If you're still reading this and interested in helping &lt;em&gt;and if you happen to be a person who is about to buy a domain name&lt;/em&gt;, you can support my cause by buying a domain name with my &lt;a href="http://www.namecheap.com?aff=34707"&gt;affiliate link&lt;/a&gt; on Namecheap. That way, a small percentage of what you spend on Namecheap might help me get a domain name for myself. But if you're not interested, no pressure, I can live without a domain name; just please don't take this the wrong way.&lt;/p&gt;
&lt;p&gt;If you're interested in helping but not looking to register a domain name right now, you could bookmark the link above and use that to make your purchase later. As you can probably tell, I haven't used Namecheap but I've heard they're great!&lt;/p&gt;
&lt;p&gt;Thank you :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Sat, 07 Jul 2012 00:00:00 +0545</pubDate><guid>tag:samrat.me,2012-07-07:blog/2012/07/help-me-buy-a-domain-name</guid><category>miscellaneous</category><category>kickstarter</category><category>domain-name</category></item><item><title>Google's answer to Siri: Now</title><link>http://samrat.me/blog/2012/06/googles-answer-to-siri-now</link><description>&lt;p&gt;If you've been following the tech world recently you'd know that Apple and Google haven't been the best of friends lately. You know, because Google ripped off Apple the same way Microsoft had ripped them off back when the PC boom was kicking off. There's a statement by Steve Jobs in his biography which can only be regarded as a declaration of war on Google. And we are starting to actually see this war taking place- a few weeks ago, Apple declared that the new iOS will come with its own 'Google Maps'-like service instead of Google Maps.&lt;/p&gt;
&lt;p&gt;And now, Google too has announced its answer to what was iOS 5's most famous addition- Siri. It's not exactly like Siri- in fact, Google has tried to go a step further and make a more smarter system. If Google succeeds in rolling out Project Glass then Google Now will be a pretty nifty feature for it too. Watch the video below to find out what Now is all about:&lt;/p&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/pPqliPzHYyc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Thu, 28 Jun 2012 00:00:00 +0545</pubDate><guid>tag:samrat.me,2012-06-28:blog/2012/06/googles-answer-to-siri-now</guid><category>miscellaneous</category><category>google</category><category>apple</category></item><item><title>Every minute of the day...</title><link>http://samrat.me/blog/2012/06/every-minute-of-the-day</link><description>&lt;p&gt;I found this totally neat infograph today on &lt;a href="http://www.visualnews.com/2012/06/19/how-much-data-created-every-minute/?view=infographic"&gt;Visual News&lt;/a&gt; and thought I'd share it with you guys. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.visualnews.com/2012/06/19/how-much-data-created-every-minute/?view=infographic"&gt;&lt;img src="http://visualnews.columnfivemedia.netdna-cdn.com/wp-content/uploads/2012/06/DOMO-Data-in-One-Minute.jpg" style="width:675px; padding:10px;"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, for a shameless plug: you might want to check out a web app I made a few weeks ago that helps you put into context how fast video is being added to Youtube- &lt;a href="http://omgyoutube.herokuapp.com/"&gt;OMGYoutube&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Sat, 23 Jun 2012 12:05:00 +0545</pubDate><guid>tag:samrat.me,2012-06-23:blog/2012/06/every-minute-of-the-day</guid><category>miscellaneous</category></item><item><title>A first look at provisioning with Puppet(on a Vagrant box)</title><link>http://samrat.me/blog/2012/06/a-first-look-at-provisioning-with-puppeton-a-vagrant-box</link><description>&lt;p&gt;In my &lt;a href="http://samrat.github.com/blog/2012/05/flask-nginx-gunicornon-a-vagrant-box/"&gt;previous post&lt;/a&gt;, I talked about deploying a Flask app on a Vagrant box using Gunicorn and Nginx. The response I got was mind-blowing, so I've decided to write about another neat tool that's awesome for deploying web apps- Puppet. &lt;a href="http://vagrantup.com"&gt;Vagrant&lt;/a&gt; actually encourages its users to use it, and you should use it. &lt;strong&gt;There's also an alternative to Puppet called &lt;a href="http://www.opscode.com/chef/"&gt;Chef&lt;/a&gt;; some people prefer that over Puppet, so you might want to check it out.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hopefully I'll be able to demonstrate what Puppet does and why its awesome in this post. But please note that this isn't meant as a comprehensive tutorial, you should check out Puppet's &lt;a href="http://docs.puppetlabs.com/"&gt;docs&lt;/a&gt; for that. Also even though the Puppet docs asks you to get the Learning Puppet VM, I found it much more comfortable to use &lt;code&gt;vagrant ssh&lt;/code&gt; for learning Puppet, so if you already have Vagraant installed, you might want to try that out too- just try running &lt;code&gt;puppet&lt;/code&gt; inside the virtual machine. &lt;/p&gt;
&lt;p&gt;What Puppet does is something called &lt;em&gt;provisioning&lt;/em&gt;- that means that it &lt;em&gt;&lt;a href="http://www.youtube.com/watch?v=bP8Mtiuc8XM"&gt;makes computers do what they are supposed to do&lt;/a&gt;&lt;/em&gt;. In other words, it does the configuring for you. To understand what that means, let's see it in action.&lt;/p&gt;
&lt;p&gt;First create a Vagrant box, &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;codebase_with_puppet&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;codebase_with_puppet&lt;/span&gt;

&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now see Vagrantfile. Open it with a text editor, then uncomment the lines&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;puppet&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manifests_path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &amp;quot;&lt;span class="n"&gt;manifests&lt;/span&gt;&amp;quot;
    &lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manifest_file&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &amp;quot;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pp&lt;/span&gt;&amp;quot;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, create &lt;code&gt;base.pp&lt;/code&gt; inside a folder called manifests, and add the following to it.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;nginx&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ensure&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, run &lt;code&gt;vagrant up&lt;/code&gt;. You'll notice that Vagrant automatically installs &lt;code&gt;nginx&lt;/code&gt; after it boots the VM. You should get a message like &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;notice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Stage&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ensure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ensure&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;purged&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;present&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can become a real treasure as this way, you won't have to memorize what you need to install, to get the app running. All the system needs is to have &lt;code&gt;puppet&lt;/code&gt; installed, after that &lt;code&gt;puppet&lt;/code&gt; with the right manifests will handle everything. &lt;/p&gt;
&lt;p&gt;Now, let's do something different with Puppet- instead of installing another package, we'll use it to configure &lt;code&gt;nginx&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;First, create a file in your local machine, inside &lt;code&gt;codebase_with_puppet&lt;/code&gt; called &lt;code&gt;codebase_nginx&lt;/code&gt;. To that file add the following&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://127.0.0.1:8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you've gone through the &lt;a href="http://samrat.github.com/blog/2012/05/flask-nginx-gunicornon-a-vagrant-box/"&gt;previous post&lt;/a&gt; you'll notice that it's the same configuration that we had used. &lt;/p&gt;
&lt;p&gt;Now, we'll use Puppet to make sure that the configuration file is placed where its supposed to be. To your &lt;code&gt;base.pp&lt;/code&gt; file, add &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/etc/nginx/sites-enabled/default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ensure&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;absent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Package&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&amp;quot;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;codebase&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/etc/nginx/sites-enabled/codebase_nginx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ensure&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;present&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Package&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nginx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &amp;quot;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;codebase_nginx&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run &lt;code&gt;vagrant reload&lt;/code&gt; and you're done with the &lt;code&gt;nginx&lt;/code&gt; configuration. Besides removing the repetitiveness for you, Puppet is also wonderful when you're working on a team or on an open-source project. Now, all you need to do is write the manifests and once you share them you can rest assured that the entire team has the exact same environment.&lt;br /&gt;
&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Mon, 04 Jun 2012 00:00:00 +0545</pubDate><guid>tag:samrat.me,2012-06-04:blog/2012/06/a-first-look-at-provisioning-with-puppeton-a-vagrant-box</guid><category>deployment</category><category>puppet</category><category>vagrant</category></item><item><title>Flask + Nginx + Gunicorn(on a Vagrant box)</title><link>http://samrat.me/blog/2012/05/flask-nginx-gunicornon-a-vagrant-box</link><description>&lt;p&gt;I had some difficulty in grasping how exactly to set up a server when I tried to do so recently, so I decided to write a tutorial that will guide you through the process. Hopefully, this post will help you avoid at least some of the confusion that I encountered.&lt;/p&gt;
&lt;p&gt;We'll be using Nginx + Gunicorn to host a simple Flask app. Many of you may not have access to a server but don't worry, we'll use &lt;a href="http://vagrantup.com"&gt;Vagrant&lt;/a&gt;, which makes use of a VirtualBox VM to emulate a server.&lt;/p&gt;
&lt;h2&gt;The Flask App&lt;/h2&gt;
&lt;p&gt;Because this is a post about deployment more than development, we'll make the web app super-simple. If you're not familiar with Flask, please &lt;a href="http://flask.pocoo.org/"&gt;check it out&lt;/a&gt;, its awesome and really easy to learn. You'll also probably want to develop the app inside &lt;a href="http://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;- it makes things a lot neater. Make a folder in your local machine(we're not working with the virtual-machine yet) for your app, I'll call it &lt;code&gt;codebase&lt;/code&gt;. Create two folders called &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;templates&lt;/code&gt;, and a Python file called &lt;code&gt;app.py&lt;/code&gt;. &lt;code&gt;codebase&lt;/code&gt; should now look like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;
├── &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
├── &lt;span class="n"&gt;static&lt;/span&gt;
└── &lt;span class="n"&gt;templates&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, open &lt;code&gt;app.py&lt;/code&gt; with a text editor and add the following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, if you run &lt;code&gt;app.py&lt;/code&gt; with &lt;code&gt;python app.py&lt;/code&gt;, you should be able to open http://localhost:5000/ and see a "Hello World!" printed. Now, freeze your requirements with&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great, now we'll start working on the actual server.&lt;/p&gt;
&lt;h2&gt;Vagrant&lt;/h2&gt;
&lt;p&gt;As I said before, Vagrant allows you to work with server-like environments on your local machine. It's absolutely great. To get &lt;a href="http://vagrantup.com"&gt;Vagrant&lt;/a&gt; up and running:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# first make sure Virtualbox is installed, then,&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;vagrant&lt;/span&gt;
&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="nb"&gt;box&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vagrantup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;precise32&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;box&lt;/span&gt;
&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If nothing went wrong, you should now see a file called &lt;code&gt;Vagrantfile&lt;/code&gt; inside &lt;code&gt;codebase&lt;/code&gt;- that's Vagrant's configuration file. Open the file, we'll need to make a few changes to the file.&lt;/p&gt;
&lt;p&gt;First, uncomment the line:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;hostonly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &amp;quot;192&lt;span class="p"&gt;.&lt;/span&gt;168&lt;span class="p"&gt;.&lt;/span&gt;33&lt;span class="p"&gt;.&lt;/span&gt;10&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and change "192.168.33.10" to "33.33.33.33". This will enable the host-machine(that is your computer) to access the webserver running on the VM.&lt;/p&gt;
&lt;p&gt;That way we should be able to access a web app running in the VM's &lt;code&gt;localhost&lt;/code&gt;, on our machine.&lt;/p&gt;
&lt;p&gt;Because, we did a &lt;code&gt;vagrant up&lt;/code&gt; the Vagrant box should already be running. Now, run&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;reload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;so that the changes we made to the Vagrantfile take place.&lt;/p&gt;
&lt;p&gt;After the VM restarts, run&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This allows you to run commands into the VM. Once inside the VM, we'll need to get some things installed. Run&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's create a folder inside the VM where we'll keep the application&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;
&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;www&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;www&lt;/span&gt;
&lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;codebase&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And let's grab the application from our local machine&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="o"&gt;/*&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;codebase&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note that while I used &lt;code&gt;cp&lt;/code&gt;, its always a better idea to use &lt;code&gt;git&lt;/code&gt; or some other version-control system. For more on that, I recommend that you read &lt;a href="http://thomas.pelletier.im/2011/04/git-django-deployment/"&gt;this post&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Then, activate the virtualenv we created.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install gunicorn with &lt;code&gt;pip&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;gunicorn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also install the other Python dependencies your app has with&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That will grab and install your app's required dependencies like Flask.&lt;/p&gt;
&lt;p&gt;Now, if you run&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;gunicorn&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;codebase&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; 127&lt;span class="p"&gt;.&lt;/span&gt;0&lt;span class="p"&gt;.&lt;/span&gt;0&lt;span class="p"&gt;.&lt;/span&gt;1&lt;span class="p"&gt;:&lt;/span&gt;8000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you'll have your app running but if you try opening it from your browser you'll find that you can't actually see the "Hello World" message that we were expecting. That's where nginx comes in.&lt;/p&gt;
&lt;h2&gt;Nginx&lt;/h2&gt;
&lt;p&gt;First of all, you need to start nginx with&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sites&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;
&lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sites&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;codebase&lt;/span&gt;
&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sites&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;codebase&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sites&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;codebase&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To &lt;code&gt;/etc/nginx/sites-enabled/codebase&lt;/code&gt; add&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;127&lt;span class="p"&gt;.&lt;/span&gt;0&lt;span class="p"&gt;.&lt;/span&gt;0&lt;span class="p"&gt;.&lt;/span&gt;1&lt;span class="p"&gt;:&lt;/span&gt;8000&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And restart nginx with&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt; &lt;span class="n"&gt;restart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, from inside &lt;code&gt;codebase&lt;/code&gt; run&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;gunicorn&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;8000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If everything went right, if you visit &lt;a href="http://33.33.33.33/"&gt;http://33.33.33.33/&lt;/a&gt; you should now see the "Hello World!" message. Congratulations! You've successfully set up your own server.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update-&lt;/strong&gt; &lt;em&gt;I've written a follow-up to this post which covers Puppet, a really handy tool that's comes packaged with Vagrant- you can &lt;a href="http://samrat.github.com/blog/2012/06/a-first-look-at-provisioning-with-puppeton-a-vagrant-box.html"&gt;find the post here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Sun, 27 May 2012 00:00:00 +0545</pubDate><guid>tag:samrat.me,2012-05-27:blog/2012/05/flask-nginx-gunicornon-a-vagrant-box</guid><category>deployment</category><category>flask</category><category>nginx</category><category>gunicorn</category></item><item><title>How to convert a bookmarklet into a Chrome extension</title><link>http://samrat.me/blog/2012/05/how-to-convert-a-bookmarklet-into-a-chrome-extension</link><description>&lt;p&gt;I've been playing around with CoffeeScript lately and discovered a neat little tool that converts any JavaScript(and thus, Coffeescript) bookmarklet into a Chrome extension- &lt;a href="http://sandbox.self.li/bookmarklet-to-extension/"&gt;check it out&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Thu, 03 May 2012 18:16:00 +0545</pubDate><guid>tag:samrat.me,2012-05-03:blog/2012/05/how-to-convert-a-bookmarklet-into-a-chrome-extension</guid></item><item><title>Would you want to be on Svbtle?</title><link>http://samrat.me/blog/2012/05/would-you-want-to-be-on-svbtle</link><description>&lt;p&gt;When I first saw the Hacker News &lt;a href="http://news.ycombinator.com/item?id=3742314"&gt;post&lt;/a&gt; about &lt;a href="http://svbtle.com/"&gt;Svbtle&lt;/a&gt;, I opened it. Svbtle looked interesting, maybe something I'd want to use but then came the part about it being only for a small number of "vetted bloggers" and like so many others I was dissapointed. The design looked so good, it was a shame I couldn't use it. &lt;/p&gt;
&lt;p&gt;Soon, &lt;em&gt;the debate&lt;/em&gt; had already started. As I said, I wasn't the only one dissapointed that it was a closed system- everyone seemed to be complaining, but &lt;a href="http://news.ycombinator.com/item?id=3744237"&gt;someone else&lt;/a&gt; had gone a step ahead and built something similar called &lt;a href="http://natewienert.com/codename-obtvse"&gt;Obtvse&lt;/a&gt; and released its code. Svbtle became the &lt;strong&gt;hot story&lt;/strong&gt; on Hacker News; even TechCrunch ran a &lt;a href="http://techcrunch.com/2012/03/24/forget-todays-drama-dustin-curtis-svbtle-is-trying-to-push-blogging-forward/"&gt;piece on it&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;So, how has things changed since I first read Dustin Curtis' post about Suvbtle? Well, now I don't really want to be on it. It's just gotten too much publicity and now the guys who are already in, the &lt;em&gt;vetted bloggers&lt;/em&gt; who were &lt;em&gt;witty and intelligent&lt;/em&gt; enough to get invited, kind of look like the bad guys. Regardless of how awesome the design is(yeah, I still the think the design is really neat), right now I think having the Svbtle brand name on my site is not something I'd want.&lt;/p&gt;
&lt;p&gt;What do you guys think? Would you want to be on Svbtle?&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Thu, 03 May 2012 18:15:00 +0545</pubDate><guid>tag:samrat.me,2012-05-03:blog/2012/05/would-you-want-to-be-on-svbtle</guid><category>miscellaneous</category></item><item><title>The Internet- First Impressions</title><link>http://samrat.me/blog/2012/03/the-internet-first-impressions</link><description>&lt;p&gt;True, the Internet has changed the way we do business, the way we access information and the way we communicate. It is a revolutionary tool, which has probably already secured a place in the history books of the future. Lately, however, the way we use the Internet has changed too. My earliest memories of the Internet is how I used to throw questions at the butler from AskJeeves.com. For those unfamiliar with it, AskJeeves(which is now Ask.com). was a search engine similar to Google.&lt;/p&gt;
&lt;p&gt;That was my introduction to the Internet: it was a butler who would try to satisfy my curiosities. However as I see it, things are changing. If I were to guess, I’d say that most people who start using the Internet these days start from social networking sites like Facebook. Now, I’ve got nothing against Facebook or social networking tools but I just don’t think that a person’s first impression of the Internet should be that it was built to emulate real-world society. Nor should kids be limited to a walled site that gives them a very limited perspective of the Internet. The internet is so much more than that. It’s so much more than what, in my opinion, most people perceive it to be. And I believe that everyone should know and make use of the endless opportunities it creates.&lt;/p&gt;
&lt;p&gt;The way people are being introduced to the internet may also be damaging to the whole ethos of the internet itself. For instance, someone with the impression that the purpose for building the Internet was to network socially will probably never make a significant contribution to the knowledge base of the internet. Furthermore, I think that these are the people who go around making stupid comments which don’t add any value to the conversation.&lt;/p&gt;
&lt;p&gt;The number of internet users is growing rapidly but do we want these people to stay limited to the walled gardens of Facebook or so many other sites which are pretty fun to hang out but limit its users off what is a gigantuan amount of knowledge? I think that we really need to rethink the way that we are introducing people to the internet. That is absolutely necessary if we are to keep the resourcefulness of the internet sustainable.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Tue, 20 Mar 2012 18:15:00 +0545</pubDate><guid>tag:samrat.me,2012-03-20:blog/2012/03/the-internet-first-impressions</guid></item><item><title>The intersection between biology and technology</title><link>http://samrat.me/blog/2011/10/the-intersection-between-biology-and-technology</link><description>&lt;p&gt;Towards the end of &lt;a href="http://www.amazon.com/gp/product/1451648537/ref=as_li_ss_tl?ie=UTF8&amp;amp;tag=samrat09-20&amp;amp;linkCode=as2&amp;amp;camp=217145&amp;amp;creative=399373&amp;amp;creativeASIN=1451648537"&gt;'Steve Jobs' by Walter Isaacson&lt;/a&gt;(the Steve Jobs bio), there's a quote by Steve Jobs that says something along the line of "The greatest advancements we will see in the twenty-first century will come from the &lt;em&gt;intersection of biology and technology&lt;/em&gt;." Since this comes from a visionary who foresaw and made possible so many of today's great technologies and products, this statement is particularly hard to ignore. &lt;/p&gt;
&lt;p&gt;So I began to wonder what these advancements would be like. Well, I got all sorts of ideas of what kind of innovations we could be expecting- nanobots fighting cancer cells, cyborgs(or maybe just enhanced human bodies), longer lifetimes, and lots of other fancy ideas. But, pretty soon I began wondering how much of these innovations would come from hackers. Many of the digital age's greatest innovations came from hackers working in their parents garage, so will we see any innovations in this era of "the intersection of biology and technology" coming from teenagers working on their own? Or will almost all of these innovations come from high-tech research labs?&lt;/p&gt;
&lt;p&gt;Hackers in the digital age innovated by tinkering. &lt;a href="http://en.wikipedia.org/wiki/Steve_Wozniak"&gt;Steve Wozniak&lt;/a&gt; practically taught himself to build computers. A really large portion of programmers are self taught. But, will we see guys who taught themselves to, say, sequence the DNA? Or someone who created nanobots that could enter our blood streams and fight diseases? Tinkering with electronics or software requires easily available resources like electronics components or just a computer. If you want to start tinkering with biotech, however, you'll arguably require much sophisticated devices. Also, security issues like bioterrorism arise when anyone can have access to these resources. &lt;/p&gt;
&lt;p&gt;Biology-hackers will probably have a much harder time getting the resources they need than the computer hackers did, but even if they did get the resources, the products or research they come up with is unlikely to become something really big. Because for one thing, no one would really trust products coming from college dropouts hacking in a garage enough to have have anything to do with their bodies. &lt;/p&gt;
&lt;p&gt;So, we probably won't see much direct contribution from hackers in this field. That is a really sad thing, given that they played such a huge role in the digital revolution. But who knows, maybe something will come along that will change this, somehting like the &lt;a href="http://en.wikipedia.org/wiki/Altair_8800"&gt;Altair 8800&lt;/a&gt; for the PC revolution. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Sat, 29 Oct 2011 18:15:00 +0545</pubDate><guid>tag:samrat.me,2011-10-29:blog/2011/10/the-intersection-between-biology-and-technology</guid><category>technology</category><category>biology</category></item><item><title>Videodropper- Behind the scenes</title><link>http://samrat.me/blog/2011/10/videodropper-behind-the-scenes</link><description>&lt;p&gt;My &lt;a href="http://samrat.github.com/blog/videodropper.html"&gt;previous post&lt;/a&gt; about my new web app- &lt;a href="http://videodropper.ep.io"&gt;Videodropper&lt;/a&gt;, which lets you send Youtube videos to your Dropbox account got quite huge on Hacker News yesterday(At least, much more than I'd anticipated). So, I decided to write another post about Videodropper on how it works.&lt;/p&gt;
&lt;p&gt;Videodropper is powered by &lt;a href="http://python.org"&gt;Python&lt;/a&gt;, &lt;a href="http://flask.pocoo.org"&gt;Flask&lt;/a&gt;, &lt;a href="http://redis.io"&gt;Redis&lt;/a&gt; and &lt;a href="http://celeryproject.org"&gt;Celery&lt;/a&gt;. It is hosted on &lt;a href="http://ep.io"&gt;Epio&lt;/a&gt;(as you might have guessed from the ep.io subdomain). All the downloading is handled by &lt;a href="https://github.com/rg3/youtube-dl"&gt;youtube-dl&lt;/a&gt; and of course, the uploading is done using the Dropbox API. 
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;What happens when you press the "Send to Dropbox" button is that Videodropper gets the Youtube video URL(playlists won't work, more on that later), and it queues it up on a Celeryd process; when the download starts, another process also starts that monitors the size of the video file so that it doesn't cross the upload limit. So, that's two processes for one file download. Currently, Videodropper runs only four processes which means that it can process only two videos at a time. Up until now, these modest resources have served quite well, as the download and upload speed is pretty high. However, the Celery instance, which is limited to 128MB of memory runs out of memory when Videodropper starts getting a lot of requests. &lt;/p&gt;
&lt;p&gt;When Celery starts a task which in this case is a "download, then upload", youtube-dl starts downloading the Youtube video which, as I mentioned above happens quite fast. Then, if the size hasn't exceeded Dropbox's upload limit(which is 150MB now, but it should soon be upgraded to 300MB), the upload process begins. That's basically the core functionality of the app. Oh, and if you choose to optimize the video for iPhone, youtube-dl simply downloads the .mp4 file(Youtube format=18) of the video, no transcoding takes place.
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Size monitoring&lt;/h2&gt;
&lt;p&gt;One obvious optimization for Videodropper is the size-monitoring as you've seen that it eats up a whole process. One solution would have been to find out the file size before downloading, but I couldn't find any way to do that(if you happen to know of any please, please tell me about it.)
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Playlist support&lt;/h2&gt;
&lt;p&gt;I've got some requests for Videodropper to start supporting playlists which is quite a reasonable request, given that Playlists is a huge part of Youtube. However, at present supporting playlists is just not an option. As I've mentioned above, Videodropper runs on a very modest server configuration and downloading playlists would surely cause Videodropper to run out of memory. The limits on the server resources are mostly because Videodropper is a free app, so I am not able to invest much money on it, so if you're interested in supporting Videodropper you could &lt;a href="https://flattr.com/thing/414622/Videodropper"&gt;donate some money on Flattr&lt;/a&gt; to help upgrade Videodropper's server capacity.&lt;/p&gt;
&lt;p&gt;In a nutshell, Flask serves the website, Celery queues up the download tasks(and also a size monitoring task) and Redis is used mostly as a backend to Celery, but also for storing the "Recent Downloads" of the user. That's it. If you have any query or suggestion feel free to shoot them at the comments below. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Fri, 21 Oct 2011 18:15:00 +0545</pubDate><guid>tag:samrat.me,2011-10-21:blog/2011/10/videodropper-behind-the-scenes</guid><category>dropbox</category><category>youtube</category><category>webapps</category><category>projects</category></item><item><title>Videodropper</title><link>http://samrat.me/blog/2011/10/videodropper</link><description>&lt;p&gt;&lt;a href="http://videodropper.ep.io"&gt;&lt;img src="http://dl.dropbox.com/u/25029287/2011-10-16-151433_1280x800_scrot.png" style="width:500px; height:300px; float:left; padding:10px;"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you're constantly troubled by having to wait for Youtube to buffer videos, or want to keep some videos with you so you can watch them again and again without wasting bandwidth, then I've just recently released a web service that lets you download videos from Youtube. &lt;strong&gt;But there are plenty of websites that already do that, why do I need another one?&lt;/strong&gt;. &lt;em&gt;What &lt;a href="http://videodropper.ep.io"&gt;Videodropper&lt;/a&gt;(yeah, that's what its called) actually does is it sends videos to your Dropbox folder&lt;/em&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Why send it to Dropbox?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Syncing&lt;/strong&gt;- Instead of downloading the video to your computer you'll be saving it to your personal cloud which will be accessible to you on any PC or mobile device. So sending a Youtube video to your Dropbox folder is basically the same as downloading into your machine, only more awesome.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bandwidth&lt;/strong&gt;- Bandwidth &lt;em&gt;is&lt;/em&gt; the primary motivation for why I built Videodropper. I have a rather slow internet connection and I get all sort of problems when watching Youtube videos- having to wait for buffering, videos getting stuck(it always happens to me when I resize the player), and the list goes on. Videodropper solves these problems because &lt;a href="http://www.dropbox.com/help/26"&gt;&lt;strong&gt;"Dropbox is smart about using bandwidth."&lt;/strong&gt;&lt;/a&gt; Downloading happens at the fastest possible speed, but without interfering with your Internet usage, so if you have a slow connection you'll be able to download Youtube videos and still use the Internet at optimal speed. Also, once its fully downloaded &lt;strong&gt;you can watch the full video without any pain&lt;/strong&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;iOS devices&lt;/strong&gt;- Dropbox works great on iOS devices and you can optimize videos you send using Videodropper to work on the iPhone or iPod touch. After you've synced the videos, you can also watch them later offline(this makes use of Dropbox's Local Storage on your iPhone/iPod).
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How do I use Videodropper?&lt;/h2&gt;
&lt;p&gt;Using Videodropper is really easy. After linking Videodropper with your Dropbox account, you just copy the URL of the video you want to send, paste it into Videodropper and then send it. A bookmarklet is also being worked on in order to further simplify this process. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that Videodropper is still in Beta, so some of your videos may not get through properly, in case you notice any thing strange kindly send an email to samratmansingh@gmail.com or reach me on Twitter &lt;a href="http://twitter.com/samratmansingh"&gt;@samratmansingh&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Thu, 20 Oct 2011 18:15:00 +0545</pubDate><guid>tag:samrat.me,2011-10-20:blog/2011/10/videodropper</guid><category>projects</category><category>dropbox</category><category>youtube</category><category>webapps</category></item><item><title>A world without LEGO</title><link>http://samrat.me/blog/2011/10/a-world-without-lego</link><description>&lt;p&gt;I just read this short but really thoughtful &lt;a href="http://sahillavingia.com/blog/why-im-scared-of-the-post-pc-era/"&gt;blog post&lt;/a&gt; by &lt;a href="http://sahillavingia.com/"&gt;Sahil Lavingia&lt;/a&gt; and couldn't agree with it more. A lot of the products we use today are products of the &lt;a href="http://catb.org/~esr/faqs/hacker-howto.html"&gt;hacker mindset&lt;/a&gt;- the personal computer, Facebook, Google. All these are here today because some guy or guys didn't just sit around waiting for some big company to make something they wanted but instead, went ahead and built what they had needed. In fact, they built it even when there were big companies building such things, just because they knew they could build a better product than those that already existed. And they built those things, despite the fact that they didn't have even a small fraction of the resources the large corporations had. And then, they built it and eventually even outgrew those very corporations. Yahoo Mail now has a &lt;em&gt;Sign in with Google&lt;/em&gt; option!&lt;/p&gt;
&lt;p&gt;Things like LEGO blocks teach us that we can go beyond being users to become builders. However, as more people "start their technology career with iPads" and their Internet careers with Facebook, the tech industry might lose the enthusiastic innovation and curiosity it is now filled with. &lt;/p&gt;
&lt;p&gt;"But hopefully I am wrong." Well, I really hope he is.&lt;br /&gt;
&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Fri, 14 Oct 2011 18:15:00 +0545</pubDate><guid>tag:samrat.me,2011-10-14:blog/2011/10/a-world-without-lego</guid><category>miscellaneous</category></item><item><title>The Gamification of Games</title><link>http://samrat.me/blog/2011/10/the-gamification-of-games</link><description>&lt;p&gt;On the front page of Hacker News I saw an item today: &lt;a href="http://news.ycombinator.com/item?id=3114239"&gt;&lt;em&gt;Who killed videogames? How games are getting more addictive but not fun&lt;/em&gt;&lt;/a&gt;. And frankly, I haven’t even read the “ghost story” yet. Still, I think I get from the elaborated title what the article is going to say. I’d also recently read &lt;a href="http://www.codinghorror.com/blog/2011/10/the-gamification.html"&gt;The Gamification&lt;/a&gt; on Coding Horror (which is actually not quite related to the context) and I couldn’t help make an association here between, and this is going to sound weird, games and gamification.&lt;/p&gt;
&lt;p&gt;Over the last one or two years games like Farmville, Angry Birds, Doodle Jump suddenly started getting a lot of attention. Those games got downloaded or played by millions of people. Obviously, a huge part of their success is due to the successful platforms they were built for, but the reason so many people have become hooked on to these games is actually how they are built to be addictive. The developers of these have put visibly much more focus on the addictiveness of the game, than say Age of Empires or Counter Strike. Of course, I do not mean to imply that those games aren’t fun or addictive. The thing is, gamers would fall in love with these games. But no one really “loves” Farmville  they just become obsessed with it. And while, games like Angry Birds are mighty time-killers they just don’t arouse the enthusiasm games like Call of Duty did. &lt;/p&gt;
&lt;p&gt;So why is there such a drastic change in how games are built? The answer: Money. Before, the way game developers made money was by selling the game on a CD or DVD. Today the game itself is available for free, but game companies have figured out newer, more valuable ways to mine money out of these games. And the way they made money, required the players to be very involved in those games. &lt;a href="http://en.wikipedia.org/wiki/Zynga"&gt;Zynga&lt;/a&gt;, the company behind Farmville makes money by selling virtual goods in the game(Zynga's business model is explained in much detail &lt;a href="http://www.financemanila.net/2011/02/how-does-zynga-make-money-their-business-model-and-revenues/"&gt;here&lt;/a&gt;). This is the same business model that carrier companies like AT&amp;amp;T use these days. They give you shiny smartphones at low prices and then mine money off you from your data usage. &lt;/p&gt;
&lt;p&gt;What all this means is that game companies have an incentive to get you addicted to the game, whatever it takes. And they are doing it really well. According to Wikipedia, “As of July 2011, Zynga's games on Facebook have over 232 million monthly active users.” and it’s valued at $15 billion to $20 billion. &lt;a href="http://en.wikipedia.org/wiki/Rovio"&gt;Rovio(Angry Birds)&lt;/a&gt; whose business model has been speculated &lt;a href="http://answers.onstartups.com/questions/22420/how-does-rovio-angry-birds-make-money/22434#22434"&gt;in this OnStartups answer&lt;/a&gt; also has had really high profits. &lt;/p&gt;
&lt;p&gt;What these companies have done, for good or for bad, is figured out how to successfully make a lot of money in the gaming industry. And the way they did it was by gamifying games. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Thu, 13 Oct 2011 18:15:00 +0545</pubDate><guid>tag:samrat.me,2011-10-13:blog/2011/10/the-gamification-of-games</guid><category>miscellaneous</category></item><item><title>Instamator is now open source</title><link>http://samrat.me/blog/2011/09/instamator-is-now-open-source</link><description>&lt;p&gt;&lt;a href="http://instamator.ep.io"&gt;Instamator&lt;/a&gt;, which I &lt;a href="http://samrat.github.com/blog/instamator.html"&gt;released just a few days ago&lt;/a&gt; is now open source. You can find the source code on &lt;a href="http://github.com/samrat/instamator"&gt;Github&lt;/a&gt;. Instamator is powered by &lt;a href="http://flask.pocoo.org"&gt;Flask&lt;/a&gt; and makes use of &lt;a href="http://redis.io"&gt;Redis&lt;/a&gt;. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Wed, 14 Sep 2011 18:15:00 +0545</pubDate><guid>tag:samrat.me,2011-09-14:blog/2011/09/instamator-is-now-open-source</guid><category>open source</category><category>instamator</category><category>instagram</category><category>flask</category></item><item><title>Instamator</title><link>http://samrat.me/blog/2011/09/instamator</link><description>&lt;p&gt;I have been wanting to create a serious web app for some time now, and I think I just did. Well, to be more accurate its a pretty simple web service. Let me introduce to you &lt;a href="http://instamator.ep.io"&gt;Instamator&lt;/a&gt;, it lets you easily grab and use the photos you've liked on Instagram, the popular photo-sharing app(for iOS devices only- but you can check &lt;a href="http://inkstagram.com/"&gt;Inkstagram&lt;/a&gt; for a web interface). &lt;/p&gt;
&lt;p&gt;How does it do that? It produces feeds(JSON, RSS and text) about the photos you liked on Instagram which you can use to easily download all your Instagram "likes" or integrate on your website or blog. &lt;/p&gt;
&lt;p&gt;Instamator was inpired by &lt;a href="http://flickmator.heroku.com"&gt;Flickmator&lt;/a&gt;, a similar web service built by &lt;a href="http://thomas.pelletier.im"&gt;Thomas Pelletier&lt;/a&gt;. It is powered by &lt;a href="http://flask.pocoo.org"&gt;Flask&lt;/a&gt;, &lt;a href="http://redis.io"&gt;Redis&lt;/a&gt; and hosted on &lt;a href="http://ep.io"&gt;ep.io&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Thu, 08 Sep 2011 18:15:00 +0545</pubDate><guid>tag:samrat.me,2011-09-08:blog/2011/09/instamator</guid><category>instagram</category><category>webapps</category><category>projects</category><category>flask</category></item><item><title>There's already a website for that</title><link>http://samrat.me/blog/2011/09/theres-already-a-website-for-that</link><description>&lt;p&gt;After reading &lt;a href="http://blog.zachwaugh.com/post/9666969587/how-i-name-my-apps"&gt;this article&lt;/a&gt; on naming apps, I came up with what I thought was a marvelous idea. I had been looking around for ideas to work on and this was just perfect- a web application that suggests names for apps based on keywords. Since my thoughts and ideas on the application was based only on the above-mentioned article, I merely assumed that nobody else had already created such a website. &lt;/p&gt;
&lt;p&gt;After some moments of dreamy satisfaction at my new idea, I started to plan how to actually build it. My first thought of course was to use an existing library or an API that would find words related to the keywords provided by the user. I knew there were APIs for a thesaurus, so I Googled it and found two that seemed to be popular- &lt;a href="http://words.bighugelabs.com/api.php"&gt;Big Huge Thesaurus&lt;/a&gt; and &lt;a href="http://developer.wordnik.com/"&gt;Wordnik&lt;/a&gt;. I opened both the sites, Wordnik's developer site seemed somewhat more attractive so, I checked that one out first. I could see from that page that quite popular sites and softwares like Facebook, Google Chrome, Firefox, Android had used the Wordnik API too, so I was pretty impressed. &lt;/p&gt;
&lt;p&gt;I wanted to see example usage of the API, just to get a better picture of how I'd write the app soI clicked on the 'Showcase' hoping I'd find what I was looking for. The 'Showcase' page, as it turns out would dissapoint me, not only because it didn't have what I was looking for but because I found out the moment the page loaded that I wasn't the first to conceive the idea I had. The app, called &lt;a href="http://panabee.com/"&gt;Panabee&lt;/a&gt; was listed at the very top. &lt;/p&gt;
&lt;p&gt;Naturally, I was very dissapointed by the revelation. I checked out the site and I have to say, I found myself impressed(...by an app that,some moments ago, I was hoping to build). So that was it,I was right where I started- again on the lookout for a new web app idea(this time hopeful that it hasn't already been built).  &lt;br /&gt;
&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Fri, 02 Sep 2011 18:15:00 +0545</pubDate><guid>tag:samrat.me,2011-09-02:blog/2011/09/theres-already-a-website-for-that</guid><category>ideas</category><category>web apps</category></item><item><title>Innovating in a developing nation</title><link>http://samrat.me/blog/2011/08/innovating-in-a-developing-nation</link><description>&lt;p&gt;Innovation is really hard to find in a developing nation. Innovation requires taking risks because when you’re innovating you are, by definition, doing things in a way that is unconventional. And taking risks in a developing nation is hard. Firstly because in a developing country the people’s first priority is to achieve financial security. Thus, many end up getting a safe job with a large corporation than risking their money by starting an enterprise. However, although that may lead to a secure future, it definitely doesn’t lead to prosperity, both for the individual and the nation. &lt;/p&gt;
&lt;p&gt;So, how can a developing nation cultivate a culture of innovation? Now, I know that a lot of people will say that the government should improve its policies to become more entrepreneur-friendly. Yes, in most developing nations governmental policies and governments can become huge setbacks to entrepreneurship; in fact, that’s probably the reason why they are developing nations in the first place. But what we must realize is that governmental policies are unlikely to change anytime soon. So whatever can be done has to be from our side. &lt;/p&gt;
&lt;p&gt;The answer, in my opinion, to improve the startup scene in any nation is to &lt;em&gt;start small&lt;/em&gt;. Entrepreneurs and innovators need to learn how to start small and make the best of the resources they have available. This is actually quite easy for web startups these days, as so much software is available for free online. Also, services like Amazon EC2 make it extremely cheap to create websites that can scale in response to the popularity it gains. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bootstrapping&lt;/em&gt; is a word that has caught on a lot recently, and not without good reason. Traditionally, the way to start a business was to raise a lot of capital and then start making and selling your stuff. Bootstrapping, on the other hand, means starting with very little cash and then turning those small investments into a profit. That’s the way a lot of today’s big companies like Apple, Google and Facebook did it. (Of course, they all raised money later from investors so that they could grow even larger.) &lt;/p&gt;
&lt;p&gt;However, the most important part of innovating or starting a business is &lt;em&gt;solving problems&lt;/em&gt;- actual problems. A lot of web startups these days solve what have properly been coined the name first world problems and they aren’t really problems, at least not compared to the third world problems. Now, if you want your creation to survive in a poor developing nation, then your creation better be good. One good example of a company solving an actual problem is &lt;a href="http://harilo.com" title="Harilo"&gt;Harilo&lt;/a&gt;. People in Nepal can’t order from stores like Amazon.com so the guys at Harilo created a service which allowed them to. It may not be a totally new idea(I’ve seen another Indian website offering a similar service) but its opened up a whole new world of online shopping in Nepal. &lt;/p&gt;
&lt;p&gt;Innovation is something citizens of developing nations must indulge in- it’s the only way we’ll be able to move forward. We are already part of the wonderful world the Internet has made possible and now is the best time to join the league of people whose beautiful creations shape this world. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Tue, 30 Aug 2011 18:15:00 +0545</pubDate><guid>tag:samrat.me,2011-08-30:blog/2011/08/innovating-in-a-developing-nation</guid><category>innovation</category><category>bootstrapping</category><category>entrepreneurship</category></item><item><title>Newsblur, an awesome alternative to Google Reader</title><link>http://samrat.me/blog/2011/08/newsblur-an-awesome-alternative-to-google-reader</link><description>&lt;p&gt;I've recently &lt;a href="http://news.ycombinator.com/item?id=2805152"&gt;discovered&lt;/a&gt; a new web app called &lt;a href="http://newsblur.com"&gt;Newsblur&lt;/a&gt;. Basically, Newsblur is a feed reader and aims to solve many problems Google Reader doesn't. Newsblur gives you the option of viewing the original website page along with the feed, so you can browse through the feed to see if anything interests you and then, see the actual webpage inside Newsblur itself. &lt;/p&gt;
&lt;p&gt;Newsblur also has this cool little feature called Intelligence Trainer. What you can do with it is that you can train Newsblur, to find articles from your subscriptions that are potentially interesting to you.  You can train the Newsblur Intelligence by 'liking' a tag or an author or other pieces of metadata. And by doing so, you'll help Newsblur identify similar items that could be interesting to you. More importantly, it helps you discard items which you wouldn't want to read.&lt;/p&gt;
&lt;p&gt;You can join Newsblur for free, however the free account has a limit of 64 subscriptions; you can also get a paid Premium account. I have used a free account for a while and my experience with it so far has been pretty fine. Its much faster than Google Reader and with its features, it helps me reach the &lt;em&gt;important content&lt;/em&gt; faster. However, it is a work in progress and thus some features like organizing feeds into folders, sending articles to Instapaper still need polishing.&lt;/p&gt;
&lt;p&gt;Newsblur is an &lt;a href="http://github.com/samuelclay/NewsBlur/"&gt;opensource project&lt;/a&gt; by Samuel Clay(&lt;a href="http://twitter.com/samuelclay"&gt;@samuelclay&lt;/a&gt;). Check it out, if you use Google Reader, you'll probably like it. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samrat Man Singh</dc:creator><pubDate>Sun, 07 Aug 2011 18:15:00 +0545</pubDate><guid>tag:samrat.me,2011-08-07:blog/2011/08/newsblur-an-awesome-alternative-to-google-reader</guid><category>webapps</category><category>reviews</category></item></channel></rss>